// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId        Int      @id @default(autoincrement()) @map("userId")
  email         String   @unique @map("email")
  password      String   @map("password")
  createdAt     DateTime @default(now()) @map("createdAt") 
  updatedAt     DateTime @updatedAt @map("updatedAt")

  UserInfos UserInfos? //1:1 관계에서 유저정보가 있을수도 있고 없을 수도 있음
  Resume Resume?

  @@map("Users")
}

model UserInfos {
  
  UserId       Int      @unique @map("userId") // 사용자(Users) 테이블을 참조하는 외래키
  name         String   @map("name")
  role         Role     @default(APPLICANT)@map("role")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("UserInfos")
}

enum Role {
  APPLICANT
  RECRUITER
}

model Resume {
  resumeId     Int      @id @default(autoincrement()) @map("resumeId")
  UserId       Int      @unique @map("userId")
  title        String   @map("title")
  introduction String   @map("introduction")
  status       Status   @default(APPLY) @map("status")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Resume") 
}

enum Status {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

